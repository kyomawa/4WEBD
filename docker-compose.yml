name: 4webd_network
networks:
  4webd_network:
    driver: bridge
services:
  traefik:
    image: traefik:v3.1
    restart: unless-stopped
    ports:
      - "80:80"        
      - "8080:8080"    
    command:
      - "--api.insecure=true"            
      - "--providers.docker=true"      
      - "--entrypoints.web.address=:80"  
      - "--ping=true"
      - "--log.level=DEBUG"
      - "--accesslog=true"     
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"               
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:80/ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - 4webd_network

  database:
    image: mongo:latest
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DATABASE_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - ./mongo-init-scripts:/docker-entrypoint-initdb.d
    networks:
    - 4webd_network

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    volumes:
      - ./auth-service:/usr/src/app/auth-service
      - ./common:/usr/src/app/common
      - auth-target-volume:/usr/src/app/auth-service/target
    depends_on:
      - database
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_AUTH_SERVICE: ${DATABASE_URL_AUTH_SERVICE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=PathPrefix(`/api/auth`)"
      - "traefik.http.routers.auth.entrypoints=web"
      - "traefik.http.services.auth.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/auth/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - 4webd_network

  users-service:
    build:
      context: ./users-service
      dockerfile: Dockerfile
    volumes:
      - ./users-service:/usr/src/app/users-service
      - ./common:/usr/src/app/common
      - users-target-volume:/usr/src/app/users-service/target
    depends_on:
      - database
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_USERS_SERVICE: ${DATABASE_URL_USERS_SERVICE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.users.rule=PathPrefix(`/api/users`)"
      - "traefik.http.routers.users.entrypoints=web"
      - "traefik.http.services.users.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/users/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - 4webd_network

  events-service:
    build:
      context: ./events-service
      dockerfile: Dockerfile
    volumes:
      - ./events-service:/usr/src/app/events-service
      - ./common:/usr/src/app/common
      - events-target-volume:/usr/src/app/events-service/target
    depends_on:
      - database
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_EVENTS_SERVICE: ${DATABASE_URL_EVENTS_SERVICE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.events.rule=PathPrefix(`/api/events`)"
      - "traefik.http.routers.events.entrypoints=web"
      - "traefik.http.services.events.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/events/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - 4webd_network

  tickets-service:
    build:
      context: ./tickets-service
      dockerfile: Dockerfile
    volumes:
      - ./tickets-service:/usr/src/app/tickets-service
      - ./common:/usr/src/app/common
      - tickets-target-volume:/usr/src/app/tickets-service/target
    depends_on:
      - database
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_TICKETS_SERVICE: ${DATABASE_URL_TICKETS_SERVICE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tickets.rule=PathPrefix(`/api/tickets`)"
      - "traefik.http.routers.tickets.entrypoints=web"
      - "traefik.http.services.tickets.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/tickets/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - 4webd_network

  notifications-service:
    build:
      context: ./notifications-service
      dockerfile: Dockerfile
    volumes:
      - ./notifications-service:/usr/src/app/notifications-service
      - ./common:/usr/src/app/common
      - notifications-target-volume:/usr/src/app/notifications-service/target
    depends_on:
      - database
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_NOTIFICATIONS_SERVICE: ${DATABASE_URL_NOTIFICATIONS_SERVICE}
      MAIL_HOSTNAME: ${MAIL_HOSTNAME}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notifications.rule=PathPrefix(`/api/notifications`)"
      - "traefik.http.routers.notifications.entrypoints=web"
      - "traefik.http.services.notifications.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/notifications/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - 4webd_network

  payments-service:
    build:
      context: ./payments-service
      dockerfile: Dockerfile
    volumes:
      - ./payments-service:/usr/src/app/payments-service
      - ./common:/usr/src/app/common
      - payments-target-volume:/usr/src/app/payments-service/target
    depends_on:
      - database
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_PAYMENTS_SERVICE: ${DATABASE_URL_PAYMENTS_SERVICE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.payments.rule=PathPrefix(`/api/payments`)"
      - "traefik.http.routers.payments.entrypoints=web"
      - "traefik.http.services.payments.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/payments/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - 4webd_network

  backups-service:
    build:
      context: ./backups-service
      dockerfile: Dockerfile
    volumes:
      - ./backups-service:/usr/src/app/backups-service
      - ./common:/usr/src/app/common
      - backups-target-volume:/usr/src/app/backups-service/target
    depends_on:
      - database
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_BACKUPS_SERVICE: ${DATABASE_URL_BACKUPS_SERVICE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backups.rule=PathPrefix(`/api/backups`)"
      - "traefik.http.routers.backups.entrypoints=web"
      - "traefik.http.services.backups.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/backups/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - 4webd_network

volumes:
  auth-target-volume:
  users-target-volume:
  events-target-volume:
  tickets-target-volume:
  notifications-target-volume:
  payments-target-volume:
  backups-target-volume:
