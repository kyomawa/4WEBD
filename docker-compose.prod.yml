services:
  traefik:
    image: traefik:v3.1
    restart: unless-stopped
    ports:
      - "80:80"      
      - "8080:8080"
    command:
      - "--providers.docker=true"          
      - "--entrypoints.http.address=:80"
      - "--ping=true"
      - "--ping.entrypoint=http"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:80/ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  database:
    image: mongo:latest
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - ./mongo-init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DATABASE_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD}

  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile.prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/auth/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_AUTH_SERVICE: ${DATABASE_URL_AUTH_SERVICE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=PathPrefix(`/api/auth`)"
      - "traefik.http.routers.auth.entrypoints=http"
      - "traefik.http.services.auth.loadbalancer.server.port=8080"

  users-service:
    build:
      context: .
      dockerfile: users-service/Dockerfile.prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/users/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_USERS_SERVICE: ${DATABASE_URL_USERS_SERVICE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.users.rule=PathPrefix(`/api/users`)"
      - "traefik.http.routers.users.entrypoints=http"
      - "traefik.http.services.users.loadbalancer.server.port=8080"

  events-service:
    build:
      context: .
      dockerfile: events-service/Dockerfile.prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/events/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_EVENTS_SERVICE: ${DATABASE_URL_EVENTS_SERVICE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.events.rule=PathPrefix(`/api/events`)"
      - "traefik.http.routers.events.entrypoints=http"
      - "traefik.http.services.events.loadbalancer.server.port=8080"

  tickets-service:
    build:
      context: .
      dockerfile: tickets-service/Dockerfile.prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/tickets/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_TICKETS_SERVICE: ${DATABASE_URL_TICKETS_SERVICE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tickets.rule=PathPrefix(`/api/tickets`)"
      - "traefik.http.routers.tickets.entrypoints=http"
      - "traefik.http.services.tickets.loadbalancer.server.port=8080"

  notifications-service:
    build:
      context: .
      dockerfile: notifications-service/Dockerfile.prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/notifications/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_NOTIFICATIONS_SERVICE: ${DATABASE_URL_NOTIFICATIONS_SERVICE}
      MAIL_HOSTNAME: ${MAIL_HOSTNAME}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notifications.rule=PathPrefix(`/api/notifications`)"
      - "traefik.http.routers.notifications.entrypoints=http"
      - "traefik.http.services.notifications.loadbalancer.server.port=8080"

  payments-service:
    build:
      context: .
      dockerfile: payments-service/Dockerfile.prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/payments/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_PAYMENTS_SERVICE: ${DATABASE_URL_PAYMENTS_SERVICE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.payments.rule=PathPrefix(`/api/payments`)"
      - "traefik.http.routers.payments.entrypoints=http"
      - "traefik.http.services.payments.loadbalancer.server.port=8080"

  backups-service:
    build:
      context: .
      dockerfile: backups-service/Dockerfile.prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/backups/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    environment:
      JWT_INTERNAL_SIGNATURE: ${JWT_INTERNAL_SIGNATURE}
      JWT_EXTERNAL_SIGNATURE: ${JWT_EXTERNAL_SIGNATURE}
      DATABASE_URL_BACKUPS_SERVICE: ${DATABASE_URL_BACKUPS_SERVICE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backups.rule=PathPrefix(`/api/backups`)"
      - "traefik.http.routers.backups.entrypoints=http"
      - "traefik.http.services.backups.loadbalancer.server.port=8080"
